@page "/"
@using RickAndMorty.Data.Services
@using RickAndMorty.Data.Models
@inject CharacterService charactersService
<PageTitle>Index</PageTitle>
<div class="jumbotron">
    <h1>.NET 💜 Azure Blazor</h1>
    <p class="lead">Example .NET app to Azure App Service.</p>
</div>
<MudText Style="display:flex; justify-content:center" Typo="Typo.h1">Characters</MudText>
<MudGrid >
    <MudItem sm="6" xs="6">
        <MudTextField Margin="Margin.Normal" Immediate="true" @bind-Value="searchTerm" Label="Buscar" Placeholder="Ingrese un término de búsqueda" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" />
    </MudItem>
    <MudItem sm="6" xs="6">
        <MudSelect T="string"  @bind-Value="value" Label="Status">
            <MudSelectItem  Value="@("Alive")" />
            <MudSelectItem Value="@("Dead")" />
            <MudSelectItem Value="@("Unknown")" />
        </MudSelect>
    </MudItem>
   
@if (characters == null)
{ <MudItem xxl="3" lg="3" md="3" xs="12" sm="6" >
            <MudCard >
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="270px" />
        <MudCardContent>
            <MudSkeleton Width="30%" Height="42px;" />
            <MudSkeleton Width="80%" />
            <MudSkeleton Width="100%" />
        </MudCardContent>
        <MudCardActions>
            <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
            <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
        </MudCardActions>
    </MudCard>
    </MudItem>
}
else{
        @foreach (var Character in characters.results.Where(c =>
       (string.IsNullOrWhiteSpace(searchTerm) || c.name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
       (string.IsNullOrWhiteSpace(value) || string.Equals(value, "Nothing selected", StringComparison.OrdinalIgnoreCase) || c.status.Equals(value, StringComparison.OrdinalIgnoreCase))))
        {
            <MudItem xs="12" sm="3"  >

                <MudCard Elevation="4">
                    <MudCardMedia Image=@Character.image  Width="200"  />
                   
            <MudCardContent>
                <MudText Typo="Typo.h4">@Character.name</MudText>
                        <MudText Typo="Typo.h5"><MudIcon Color=@GetColor(Character.status) Icon="@Icons.Material.Filled.Circle" /> @Character.status</MudText>
                        <MudText Typo="Typo.body2">@Character.location.name</MudText>
                
            </MudCardContent>
            <MudCardActions>
           
            </MudCardActions>
        </MudCard>
        </MudItem>
    }   
}
    </MudGrid>
<MudScrollToTop>
    <MudFab Color="Color.Tertiary" Icon="@Icons.Material.Filled.ArrowCircleUp" />
</MudScrollToTop>

@code {
    private string value { get; set; } = "Nothing selected";
    private string searchTerm = "";
    private string status = "";
    public Characters characters { get; set; } =null;
    protected override async Task OnInitializedAsync()
    {
        characters = await charactersService.GetAllCharacters();
       
    }
    private Dictionary<string, Color> statusColors = new Dictionary<string, Color>
    {
        { "Alive", Color.Success }, 
        { "Dead", Color.Error },   
        
    };
    public Color GetColor(string status)
    {
        // Busca el valor de color para el estado, devuelve Color.Default si no se encuentra
        if (statusColors.TryGetValue(status, out var color))
        {
            return color;
        }
        return Color.Default;
    }
}