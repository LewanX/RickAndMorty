@page "/"
@using RickAndMorty.Data.Services
@using RickAndMorty.Data.Models
@inject CharacterService charactersService
<PageTitle>Index</PageTitle>

<MudText Style="display:flex; justify-content:center" Typo="Typo.h2">Characters</MudText>
<MudGrid  >
    <MudItem sm="6" xs="6">
        <MudTextField Margin="Margin.Normal" Immediate="true" @bind-Value="searchTerm" Label="Buscar" TextChanged="search" Placeholder="Ingrese un término de búsqueda" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" />
    </MudItem>
    <MudItem sm="6" xs="6">
        <MudSelect T="string"  SelectedValuesChanged="search" @bind-Value="value" Label="Status">
            <MudSelectItem   Value="@("All")" />
            <MudSelectItem  Value="@("Alive")" />
            <MudSelectItem   Value="@("Dead")" />
            <MudSelectItem Value="@("Unknown")" />
        </MudSelect>
    </MudItem>
 @*   <MudItem sm="2" xs="2">
        <MudSelect T="string" @bind-Value="value" Label="Status">
            <MudSelectItem Value="@("All")" />
            <MudSelectItem Value="@("Alive")" />
            <MudSelectItem Value="@("Dead")" />
            <MudSelectItem Value="@("Unknown")" />
        </MudSelect>
    </MudItem>*@
   
  
    
@if (characters == null)
{ <MudItem xxl="3" lg="3" md="3" xs="12" sm="6"  >
            <MudCard >
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="270px" />
        <MudCardContent>
            <MudSkeleton Width="30%" Height="42px;" />
            <MudSkeleton Width="80%" />
            <MudSkeleton Width="100%" />
        </MudCardContent>
        <MudCardActions>
            <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
            <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
        </MudCardActions>
    </MudCard>
    </MudItem>
}
else{
        @foreach (var Character in characters.results@*.Where(c =>
       (string.IsNullOrWhiteSpace(searchTerm) || c.name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
       (string.IsNullOrWhiteSpace(value) || string.Equals(value, "All", StringComparison.OrdinalIgnoreCase) || c.status.Equals(value, StringComparison.OrdinalIgnoreCase)))*@)
        {
            <MudItem xs="12" sm="3"   >
                <CharacterModal character="@Character" />             
            </MudItem>
    }
             <MudItem xs="12" sm="12"   >
        <div class="d-flex flex-column align-center">
                <MudPagination BoundaryCount="5" MiddleCount="10"  Count="@characters.info.pages"  SelectedChanged="getPage" Class="mt-4" />
        </div>
        </MudItem>
    }

 
</MudGrid>


<MudScrollToTop>
    <MudFab Color="Color.Tertiary" Icon="@Icons.Material.Filled.ArrowCircleUp" />
</MudScrollToTop>

@code {
    private int currentPage { get; set; } = 1;
    private string value { get; set; } = "";
    private string searchTerm = "";
    private string status = "";
    private int _selected{ get; set; }
    private int pagination { get; set; }
    private int pages{ get; set; }
    public Characters characters { get; set; } = null;



    async Task search()
    {
        try
        {
            if (value == "All") value = "";

            currentPage = 1;
            characters = await charactersService.GetCharacterByName(currentPage, searchTerm, value);

        }
        catch (Exception ex)
        {

            throw ex;
        }




        StateHasChanged();
    }
    async Task getPage(int x)
    {

        characters = await charactersService.GetCharacterByName(x, searchTerm, value);
      


        StateHasChanged();
    }
    
  
    protected override async Task OnInitializedAsync()
    {

        characters = await charactersService.GetCharacterByName();

     

    }
    private Dictionary<string, Color> statusColors = new Dictionary<string, Color>
    {
        { "Alive", Color.Success }, 
        { "Dead", Color.Error },   
        
    };
    public Color GetColor(string status)
    {
        // Busca el valor de color para el estado, devuelve Color.Default si no se encuentra
        if (statusColors.TryGetValue(status, out var color))
        {
            return color;
        }
        return Color.Default;
    }
    
}